Notes for documentation
-----------------------

0. Controllers

        - init(), indexAction() methods are not mandatory

1. New Layout

        - you have to set the router and the viewHelperBroker to it

2. Default Layout Path (defaultLayoutPath) can be defined either:

        Default layout path is 'application/layouts/default', if you want to use a different default layout path,

        - application.ini

            defaultLayoutPath   = 'application/layouts/yourFolder'

        - Bootstrap

            protected function _initDefaultLayoutPath()
            {
                return 'application/layouts/yourFolder';
            }

3. Partials

        - They are Phtml objects and their files (.phtml) must be stored in application/views/partials
        - Then you have to assign that partial to another one or to the layout (indeed is also a partial)

                $partial = new Phtml('application/views/partials/example.phtml');
                $this->_view->addPartial('example', $partial);

        - Now in the parent view or layout:

                $this->partial('example')->render();

4. View

        - All variables defined in a partial are propagated to its child
        - Create the action view is:

                - create a new partial

                    $view = new Phtml($pathToThePhtmlFile);

                - set it to the layout with the name 'content'

                    $layout->addPartial('content', $view);

        - View variables

                - In the action

                    $view->variableName = $value;

                - In the view

                    echo $this->variableName;

5. Bootstrap

        - Add new resource

                protected function _initResourceName()
                {
                    return new ResourceName();
                }

6. Events

7. Databases

8. Dependencies

9. Routes

10. Models

        - db property to see contextual help:

                /**
                 * @var Adapter
                 */
                private $_db;

11. Exceptions

        - 'xen\mvc\helpers\exception\HelperNotFoundException'
        - 'xen\mvc\exception\ControllerParamNotFoundException'

12. View Helpers

        - implement protected _html() method
        - Router available in $this->_router
        - Params from view available in $this->_params

13. Ajax response

        //$this->render();
        return $json;

14. Use of ZendPdf in xenframework

        http://stackoverflow.com/questions/14717024/where-to-get-and-how-to-use-zend-pdf-standalone

        - copy to vendor:

            - Zend\Memory
            - ZendPdf

        - In a controller:

                use ZendPdf\PdfDocument;
                use ZendPdf\Page;
                use ZendPdf\Font;

                $pdf = new PdfDocument();

                        $pdf->pages[0] = new Page( Page::SIZE_A4 );
                        $pdf->pages[0]->setFont( Font::fontWithName( Font::FONT_HELVETICA ), 24 );
                        $pdf->pages[0]->drawText( 'Hello world!', 240, 400 );

                        $pdf->save( $absolutePathTo . 'example.pdf' );

        - Be sure www user has write permissions in that directory

15. Partial Cache

            public function indexAction()
            {
                $this->_layout->title           = 'xenFramework.com';
                $this->_layout->description     = 'Create your own Php MVC Framework from scratch';

                $partial = new Phtml('application/views/partials/example.phtml', 10);

                if ($content = $this->_cache->get('application/views/partials/example.phtml', 10))
                {
                    $partial->setCachedContent($content);
                }
                else
                {
                    // ...
                    // more complex code
                    // ...

                    $partial->complexQuery = 'complex1';

                    // ...
                    // more complex code
                    // ...
                }

                $this->_view->addPartial('example', $partial);

                $this->render();
            }